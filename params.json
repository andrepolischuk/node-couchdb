{"name":"Node-couchdb","tagline":"An extendable couch client lib for nodejs","body":"# Node Couchdb Client [![NPM version](https://badge.fury.io/js/couch-db.svg)](http://badge.fury.io/js/couch-db) [![Build Status](https://travis-ci.org/villadora/node-couchdb.png)](https://travis-ci.org/villadora/node-couchdb)  [![Coverage Status](https://coveralls.io/repos/villadora/node-couchdb/badge.png)](https://coveralls.io/r/villadora/node-couchdb)\r\n\r\nThere are already many couchdb client in npm, and some of them are great projects, like [nano](https://github.com/dscape/nano), [cradle](https://github.com/flatiron/cradle), but still not implements the couchdb features that satisfied my needs in auth, view operations and flexibility. Some libs has fewer apis and failed to meet needs. Even some are not complete yet or not friendly to use. \r\n\r\nThere is always arguments that whether we really need a library for couchdb as it has rest apis. To me, if I'm working on a small project that read/write some documents from couchdb, I'm happy to work with http request lib like [request](mikeal/request). \r\n\r\nBut when your applications heavily depends on couch, you may want something that make code better orgnized rather than concating url strings in everywhere.\r\n\r\n- [Features](#features)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Documentations](#documentations)\r\n- [License](#license)\r\n\r\n## Features\r\n\r\n* Extendable via bind, to build your own apis\r\n* Support view, lists and shows\r\n* Chain for query paramters, easy and clean\r\n* All the concepts (View, Document, etc.) are seperated, which make this lib support urls that get rewritted\r\n* Treat DesignDoc the same as Document, you can do operations on DesignDoc\r\n* Support Https, via request\r\n\r\n\r\n## Installation\r\n\r\n    npm install couch-db --save\r\n\r\n## Usage\r\n\r\n#### Create a couch server\r\n\r\n``` js\r\nvar couch = require('couch-db'),\r\n    server = couch('http://localhost:5984');\r\n/// or \r\nserver = couch('https://localhost:6984', {\r\n    rejectUnauthorized: false // this will pass to request\r\n});\r\n```\r\n\r\nOr\r\n\r\n``` js\r\nvar CouchDB = require('couch-db').CouchDB;\r\n    server = new CouchDB('http://localhost:5984');\r\n```\r\n\r\n#### Authenticate with username && password\r\n\r\n``` js\r\nserver.auth(username, password);\r\n```\r\n\r\n#### Or you can utilize the session by login\r\n\r\n``` js\r\nserver.login(username, password, function(err) {\r\n    // do admin ops\r\n    ....\r\n    server.logout(function(err) {\r\n        // final work\r\n    });\r\n});\r\n```\r\n\r\n#### Get a database\r\n\r\n``` js\r\nvar db = server.database('couch');\r\n```\r\n\r\nOr using bind:\r\n\r\n``` js\r\nserver.bind('couch');\r\nvar db = server.couch;\r\n\r\n// destroy\r\nserver.unbind('couch');\r\n```\r\n\r\n#### You can extend database\r\n\r\n``` js\r\ndb.extend({\r\n   // read documents by page\r\n   page: function(n, limit, callback) {\r\n       // Don't use skip/limit do page on views, see http://docs.couchdb.org/en/1.5.x/couchapp/views/pagination.html#views-pagination\r\n       return this.select().skip((n-1)*limit).limit(limit|| this.defaultLimit).exec(callback);\r\n   },\r\n   defaultLimit: 20\r\n});\r\n\r\n\r\ndb.page(1, 20, function(err, rows) {\r\n    // get page items\r\n});\r\n```\r\n\r\n\r\n#### Create database and insert new doc\r\n\r\n``` js\r\nvar server = require('couch-db')('http://localhost:5984');\r\n\r\nvar db = server.database('test');\r\ndb.destroy(function(err) {\r\n    // create a new database\r\n    db.create(function(err) {\r\n        // insert a document with id 'jack johns'\r\n        db.insert({ _id: 'jack johns', name: 'jack' }, function(err, body) {\r\n            if (err) {\r\n                console.log('insertion failed ', err.message);\r\n                return;\r\n            }\r\n            console.log(body);\r\n            // body will like following:\r\n            //   { ok: true,\r\n            //     id: 'jack johns',\r\n            //     rev: '1-610953b93b8bf1bae12427e2de181307' }\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### create new document with attachments\r\n\r\n``` javascript\r\n// new document\r\nvar doc = db.testdb.doc({});\r\ndoc.attach([{\r\n    name: 'place.css',\r\n    content_type: 'text/css',\r\n    data: 'body { font-size: 12px; }'\r\n}, {\r\n    name: 'script.js',\r\n    content_type: 'script/javascript',\r\n    data: 'window.onload(function() {})'\r\n}]).create(function(err) {\r\n\r\n});\r\n\r\n```\r\n\r\n### add/retrieve/update attachment\r\n\r\n```javascript\r\n// existing document\r\nvar doc = db.testdb.doc({\r\n    _id: 'docid'\r\n});\r\n\r\n// open to get revision or assign revision to the document\r\ndoc.open(function(err) {\r\n    doc.attach('plain.css, 'body { font-size:12pt; }', 'text/css');\r\n    // save the doc\r\n    doc.save(function(err, rs) {\r\n        var plain = doc.attachment('plain.txt');\r\n        // retrieve attachment\r\n        plain.get(function(err, body) {\r\n            assert.equal(body, 'body { font-size:12pt; }');\r\n            // update\r\n            plain.update('body { font-size:14pt; }', 'text/css', function(err) {\r\n                plain.get(function(err, body) {\r\n                    assert.equal(body, 'body { font-size:14pt; }');\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### add attachments with pipe\r\n\r\n```javascript\r\nvar d = doc.addAttachment('logo.png', null, 'image/png');\r\nif (!d) assert.fail('Failed to create connect stream');\r\nvar s = fs.createReadStream(path.resolve(__dirname, './logo.png')).pipe(d);\r\ns.on('end', function() {});\r\n```\r\n\r\n\r\n## Documentations\r\n\r\nSee [here](http://villadora.github.io/node-couchdb) for more detail documentations.\r\n\r\n\r\n## License\r\n\r\n(The BSD License)\r\n\r\n    Copyright (c) 2014, Villa.Gao <jky239@gmail.com>;\r\n    All rights reserved.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}