{"name":"Node-couchdb","tagline":"An extendable couch client lib for nodejs","body":"# Node Couchdb Client \r\n\r\nThere are already many couchdb client in npm, and some of them are great projects, like [nano](https://github.com/dscape/nano), [cradle](https://github.com/flatiron/cradle), but still not implements the couchdb features that satisfied my needs in auth, view operations and flexibility. Some libs has fewer apis and failed to meet needs. Even some are not complete yet or not friendly to use. \r\n\r\nThere is always arguments that whether we really need a library for couchdb as it has rest apis. To me, if I'm working on a small project that read/write some documents from couchdb, I'm happy to work with http request lib like [request](mikeal/request). \r\n\r\nBut when your applications heavily depends on couch, you may want something that make code better orgnized rather than concating url strings in everywhere.\r\n\r\n- [Features](#features)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [APIs](#apis)\r\n   - [CouchDB](#couchdb)\r\n   - [Database](#database)\r\n\r\n\r\n## Features\r\n\r\n* Extendable via bind, to build your own apis\r\n* Support view, lists and shows\r\n* Chain for query paramters, easy and clean\r\n* All the concepts (View, Document, etc.) are seperated, which make this lib support urls that get rewritted\r\n* Treat DesignDoc the same as Document, you can do operations on DesignDoc\r\n* Support Https\r\n\r\n\r\n## Installation\r\n\r\n    npm install couch-db --save\r\n\r\n## Usage\r\n\r\n#### Create a couch server\r\n\r\n``` js\r\nvar couch = require('couch-db'),\r\n    server = couch('http://localhost:5984');\r\n/// or \r\nserver = couch('https://localhost:6984', {\r\n    rejectUnauthorized: false // this will pass to request\r\n});\r\n```\r\n\r\nOr\r\n\r\n``` js\r\nvar CouchDB = require('couch-db').CouchDB;\r\n    server = new CouchDB('http://localhost:5984');\r\n```\r\n\r\n#### Authenticate with username && password\r\n\r\n``` js\r\nserver.auth(username, password);\r\n```\r\n\r\n#### Or you can utilize the session by login\r\n\r\n``` js\r\nserver.login(username, password, function(err) {\r\n    // do admin ops\r\n    ....\r\n    server.logout(function(err) {\r\n        // final work\r\n    });\r\n});\r\n```\r\n\r\n#### Get a database\r\n\r\n``` js\r\nvar db = server.database('couch');\r\n```\r\n\r\nOr using bind:\r\n\r\n``` js\r\nserver.bind('couch');\r\nvar db = server.couch;\r\n\r\n// destroy\r\nserver.unbind('couch');\r\n```\r\n\r\n#### You can extend database\r\n\r\n``` js\r\ndb.extend({\r\n   // read documents by page\r\n   page: function(n, limit, callback) {\r\n       // Don't use skip/limit do page on views, see http://docs.couchdb.org/en/1.5.x/couchapp/views/pagination.html#views-pagination\r\n       return this.select().skip((n-1)*limit).limit(limit|| this.defaultLimit).exec(callback);\r\n   },\r\n   defaultLimit: 20\r\n});\r\n\r\n\r\ndb.page(1, 20, function(err, rows) {\r\n    // get page items\r\n});\r\n```\r\n\r\n\r\n#### Create database and insert new doc\r\n\r\n``` js\r\nvar server = require('couch-db')('http://localhost:5984');\r\n\r\nvar db = server.database('test');\r\ndb.destroy(function(err) {\r\n    // create a new database\r\n    db.create(function(err) {\r\n        // insert a document with id 'jack johns'\r\n        db.insert({ _id: 'jack johns', name: 'jack' }, function(err, body) {\r\n            if (err) {\r\n                console.log('insertion failed ', err.message);\r\n                return;\r\n            }\r\n            console.log(body);\r\n            // body will like following:\r\n            //   { ok: true,\r\n            //     id: 'jack johns',\r\n            //     rev: '1-610953b93b8bf1bae12427e2de181307' }\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n## APIs\r\n\r\n### Options\r\n\r\nMost of classes in this lib is accept an option object to let you configure the behaviors that how to request to the server.\r\n\r\nAll the options that you can pass to [request](mikeal/request), you can set here. So you can control whether use _strictSSL_, _proxy_ yourself.\r\n\r\nIs there any other additional options that is used by [couch-db][villadora/node-couchdb)?\r\n\r\nNone except one: _request_. The request options is let user to take full control of how to send request to the server, and of course, you have to follow the _request_ api. Via this options, you can do cache layer to reduce request via modules like [modified](kaelzhang/node-modified), or even intercept the response.\r\n\r\nSo except the _request_ field, you can treat the options is the same as options in [request](https://github.com/mikeal/request).\r\n\r\nYou can go and see the doc [there](https://github.com/mikeal/request).\r\n\r\n### CouchDB\r\n\r\n#### new CouchDB(url, [options])\r\n\r\n* url {string} couchdb address\r\n* options {object=} \r\n\r\n```js\r\nvar CouchDB = require('couch-db').CouchDB;\r\nvar couch = new CouchDb(url, options); \r\n```\r\n\r\n#### couch.config([opts])\r\n\r\nGet a Config instance to view/change db configurations\r\n\r\n* opts {object=}\r\n\r\n```js\r\nvar config = couch.config();\r\n```\r\n\r\n#### couch.database(dbname, [opts])\r\n\r\nGet a Database instance from current couch with name as _dbname_\r\n\r\n* dbname {string}\r\n* opts {object=}\r\n\r\n\r\n```js\r\nvar db = couch.database('testdb');\r\n```\r\n\r\n#### couch.bind(dbname, [opts])\r\n\r\n#### couch.unbind(dbname)\r\n\r\n#### couch.existsDb(dbname, callback)\r\n\r\nTest whether a database is existed, only available for couchdb >= 1.5.\r\n\r\n#### couch.allDbs(callback)\r\n\r\n#### couch.allDesignDocs(callback)\r\n\r\n#### couch.auth(username, password)\r\n\r\n#### couch.login(username, password, callback)\r\n\r\nUse session login.\r\n\r\n#### couch.logout(callback)\r\n\r\nDo logout.\r\n\r\n#### couch.session(callback)\r\n\r\nReturn current session information.\r\n\r\n#### couch.info(callback)\r\n\r\n\r\nGet basic information about the couch server.\r\n\r\n#### couch.stats(statisticId, callback)\r\n\r\nReturn statistic information.\r\n\r\n#### couch.newUuids(n, callback)\r\n\r\nReturn _n_ uuids.\r\n\r\n\r\n\r\n\r\n### Config\r\n\r\n\r\n### Database\r\n\r\n#### db.tempView\r\n\r\n\r\n### Document\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}